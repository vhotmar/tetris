unit TetrisBlocks;
interface

uses TetrisBoard;

type
  TTetrisBlock = record
    InitialOffset: array [0..1] of integer;
    Blocks: array [0..4, 0..4] of integer;
  end;

type TTetrisBlocks = array [0..6, 0..3] of TTetrisBlock;

{ All types of tetris blocks represented as 5x5 matrix
  with all rotations and initial offset of the block
  (when the block first appears on top)

  1 - normal block
  2 - origin }
const CTetrisBlocks: TTetrisBlocks = (
  (
    { Squares }
    (
      InitialOffset: (-2, -3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 2, 1, 0),
        (0, 0, 1, 1, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2, -3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 2, 1, 0),
        (0, 0, 1, 1, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2, -3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 2, 1, 0),
        (0, 0, 1, 1, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2, -3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 2, 1, 0),
        (0, 0, 1, 1, 0),
        (0, 0, 0, 0, 0)
      )
    )
  ),
  (
    { I }
    (
      InitialOffset: (-2, -2);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 1, 2, 1, 1),
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 2, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 1, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-2);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (1, 1, 2, 1, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 1, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 2, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    )
  ),
  (
    { L }
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 2, 0, 0),
        (0, 0, 1, 1, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 1, 2, 1, 0),
        (0, 1, 0, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 1, 1, 0, 0),
        (0, 0, 2, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-2);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 1, 0),
        (0, 1, 2, 1, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0)
      )
    )
  ),
  (
    { Reverse L }
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 2, 0, 0),
        (0, 1, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-2);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 1, 0, 0, 0),
        (0, 1, 2, 1, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 1, 0),
        (0, 0, 2, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 1, 2, 1, 0),
        (0, 0, 0, 1, 0),
        (0, 0, 0, 0, 0)
      )
    )
  ),
  (
    { N }
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 1, 0),
        (0, 0, 2, 1, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 1, 2, 0, 0),
        (0, 0, 1, 1, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 1, 2, 0, 0),
        (0, 1, 0, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-2);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 1, 1, 0, 0),
        (0, 0, 2, 1, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0)
      )
    )
  ),
  (
    { Reverse N }
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 2, 1, 0),
        (0, 0, 0, 1, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 2, 1, 0),
        (0, 1, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 1, 0, 0, 0),
        (0, 1, 2, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-2);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 1, 0),
        (0, 1, 2, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0)
      )
    )
  ),
  (
    { T }
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 2, 1, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0),
        (0, 1, 2, 1, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-3);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 1, 2, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 0, 0, 0, 0)
      )
    ),
    (
      InitialOffset: (-2,-2);
      Blocks: (
        (0, 0, 0, 0, 0),
        (0, 0, 1, 0, 0),
        (0, 1, 2, 1, 0),
        (0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0)
      )
    )
  )
);

implementation
end.
